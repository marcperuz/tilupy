import pytest
import numpy as np

import tilupy.analytic_sol as tias

x = np.linspace(0, 10, 10)
x_dr = np.linspace(-100, 100, 10)

# RITTER
@pytest.mark.parametrize(
    "args, expected",
    [
        ((1, 2), (
            [[1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.773550069332714, 0.5795271310412057, 0.413470392800316, 0.27537985461004527, 0.16525551647039335, 0.08309737838136025, 0.028905440342945937, 0.0026797023551504624, 0.0, 0.0], [0.503016730368978, 0.47002911232120503, 0.43816014227545685, 0.4074098202317334, 0.37777814619003464, 0.34926512015036065, 0.32187074211271144, 0.295595012077087, 0.27043793004348726, 0.2463994960119124]],
            [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.7547279684487768, 1.4954687091895176, 2.236209449930258, 2.9769501906709985, 3.71769093141174, 4.45843167215248, 5.199172412893221, 5.939913153633961, 0.0, 0.0], [1.8213946351154435, 1.9695427832635917, 2.1176909314117394, 2.2658390795598877, 2.413987227708036, 2.562135375856184, 2.7102835240043324, 2.8584316721524807, 3.006579820300628, 3.154727968448777]]
            )),
        ((2, 3), (
            [[2.0, 2.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.5928572093877025, 1.3083569317525234, 1.0518228541679633, 0.8232549766340214, 0.6226532991506988, 0.450017821717995, 0.3053485443359099, 0.18864546700444362, 0.09990858972359627, 0.03913791249336773], [1.0133726651191308, 0.9663167120099129, 0.9203794069027194, 0.8755607497975512, 0.8318607406944071, 0.7892793795932882, 0.7478166664941939, 0.7074726013971245, 0.6682471843020797, 0.6301404152090597]],
            [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.9529646120466803, 1.693705352787421, 2.4344460935281615, 3.175186834268903, 3.9159275750096434, 4.656668315750384, 5.397409056491125, 6.138149797231866, 6.878890537972606, 7.619631278713347], [2.5529646120466802, 2.701112760194828, 2.849260908342976, 2.9974090564911244, 3.145557204639273, 3.2937053527874207, 3.441853500935569, 3.5900016490837174, 3.7381497972318654, 3.8862979453800137]]
            )),
    ],
)

def test_ritter(args, expected):
    case = tias.Ritter_dry(h_0=args[0], x_0=args[1])
    case.compute_h(x, [0, 1, 5])
    case.compute_u(x, [0, 1, 5])
    
    assert case.h.tolist() == expected[0]
    assert np.nan_to_num(case.u, True, 0).tolist() == expected[1]


# STOKER
@pytest.mark.parametrize(
    "args, expected",
    [
        ((1, 2, 0.2, None), (
            [[1.0, 1.0, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2], [0.8243327271636552, 0.8243327271636552, 0.8243327271636552, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2], [0.8243327271636552, 0.8243327271636552, 0.8243327271636552, 0.8243327271636552, 0.8243327271636552, 0.8243327271636552, 0.2, 0.2, 0.2, 0.2]],
            [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.5767577551530962, 0.5767577551530962, 0.5767577551530962, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.5767577551530962, 0.5767577551530962, 0.5767577551530962, 0.5767577551530962, 0.5767577551530962, 0.5767577551530962, 0.0, 0.0, 0.0, 0.0]]
            )),
        ((2, 3, 1, 0.5), (
            [[2.0, 2.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.5928572093877025, 1.3083569317525234, 1.0518228541679633, 0.8232549766340214, 0.6226532991506988, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0133726651191308, 0.9663167120099129, 0.9203794069027194, 0.8755607497975512, 0.8318607406944071, 0.7892793795932882, 0.7478166664941939, 0.7074726013971245, 0.6682471843020797, 0.6301404152090597]],
            [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.9529646120466803, 1.693705352787421, 2.4344460935281615, 3.175186834268903, 3.9159275750096434, 0.0, 0.0, 0.0, 0.0, 0.0], [2.5529646120466802, 2.701112760194828, 2.849260908342976, 2.9974090564911244, 3.145557204639273, 3.2937053527874207, 3.441853500935569, 3.5900016490837174, 3.7381497972318654, 3.8862979453800137]]
            )),
    ],
)

def test_stoker(args, expected):
    case = tias.Stoker_SWASHES_wet(h_0=args[0], x_0=args[1], h_r=args[2], h_m=args[3])
    case.compute_h(x, [0, 1, 5])
    case.compute_u(x, [0, 1, 5])
    
    assert case.h.tolist() == expected[0]
    assert np.nan_to_num(case.u, True, 0).tolist() == expected[1]


# MANGENEY
@pytest.mark.parametrize(
    "args, expected",
    [
        ((1, 2, 10, 0), (
            [[1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.9457484124780647, 0.728184381809543, 0.5390179749057405, 0.3782491917666569, 0.2458780323922919, 0.14190449678264577, 0.06632858493771845, 0.01915029685750998, 0.00036963254202035655, 0.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9989186110864343, 0.9518488349095708, 0.9059149636832955]],
            [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1.8744651751753456, 2.615205915916086, 3.355946656656827, 4.0966873973975675, 4.837428138138309, 5.578168878879049, 6.31890961961979, 7.059650360360532, 7.8003911011012725, 0], [0, 0, 0, 0, 0, 0, 0, 8.520805206645946, 8.668953354794095, 8.817101502942243]]
            )),
        ((1, 3, 10, 5), (
            [[1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 0.8376970535249351, 0.6337738548039872, 0.4582482798477583, 0.311120328656248, 0.1923900012294568, 0.10205729756738426, 0.040122217670030574, 0.006584761537395738, 0.0], [0.9237499737279438, 0.8785076180125304, 0.8344011672477062, 0.7914306214334708, 0.749595980569824, 0.7088972446567657, 0.6693344136942964, 0.6309074876824157, 0.5936164666211238, 0.5574613505104208]],
            [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1.3850560267672383, 2.1257967675079787, 2.8665375082487197, 3.607278248989461, 4.3480189897302015, 5.088759730470942, 5.8295004712116825, 6.570241211952423, 0], [4.53301872386467, 4.681166872012818, 4.829315020160966, 4.977463168309114, 5.125611316457261, 5.27375946460541, 5.421907612753558, 5.570055760901707, 5.718203909049855, 5.866352057198002]]
            )),
    ],
)

def test_mangeney(args, expected):
    case = tias.Mangeney_dry(h_0=args[0], x_0=args[1], theta=args[2], delta=args[3])
    case.compute_h(x, [0, 1, 5])
    case.compute_u(x, [0, 1, 5])
    
    assert case.h.tolist() == expected[0]
    assert np.nan_to_num(case.u, True, 0).tolist() == expected[1]


# DRESSLER
@pytest.mark.parametrize(
    "args, expected",
    [
        ((10, 0, 500), (
            [[10.0, 10.0, 10.0, 10.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0], [10.0, 10.0, 10.0, 7.939377376020549, 5.497673843981041, 3.503504327688577, 1.9568608445258915, 0.8577343903853635, 0.20611527219577067, 0.0], [10.0, 8.619741144268092, 7.2870353677133926, 6.066234555094638, 4.957336907292844, 3.9603405383150645, 3.0752434628411938, 2.3020435821752643, 1.6407386714963517, 1.0913263819330312]],
            [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 2.15855379846858, 5.121265347569312, 8.083301330873763, 11.043097527061898, 13.993215338470591, 16.861074937185528, 0.0], [0.0, 1.4178201913843567, 2.8991991912354953, 4.380441441955546, 5.861447426301407, 7.342041426067596, 8.8218980786986, 10.300376398807186, 11.776105124217604, 13.245799128360286]]
            )),
        ((10, 0, 100), (
            [[10.0, 10.0, 10.0, 10.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0], [10.0, 10.0, 10.0, 7.939920987997466, 5.500652806115926, 3.5107172308089156, 1.9699270025594824, 0.8781250106254141, 0.2357983390979227, 0.0], [10.0, 8.620213261051456, 7.28898403527281, 6.070624265316293, 4.965090048035922, 3.9723365611847066, 3.0923190886393503, 2.324995782862865, 1.6703353389899114, 1.1283404280274314]],
            [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 2.157801043877103, 5.114478660284273, 8.054267131784368, 10.938060925376712, 13.579895099482918, 14.165273956245224, 0.0], [0.0, 1.4172386445492535, 2.8961580852721664, 4.371658797717888, 5.841252850808844, 7.30054728940801, 8.741408049627617, 10.147810496786663, 11.485473076491552, 12.672267624503094]]
            )),
    ],
)

def test_dressler(args, expected):
    case = tias.Dressler_dry(h_0=args[0], x_0=args[1], C=args[2])
    case.compute_h(x_dr, [0, 5, 10])
    case.compute_u(x_dr, [0, 5, 10])
    
    h = case.h
    assert h.tolist() == expected[0]
    u = np.nan_to_num(case.u, True, 0)
    assert u.tolist() == expected[1]


# CHANSON
@pytest.mark.parametrize(
    "args, expected",
    [
        ((1, 2, 10), (
            [[1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.7736557780073382, 0.6614939151877408, 0.5259326352458766, 0.3400530455722146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.6305766684159937, 0.598563852966309, 0.5647392649755569, 0.5287553202875518, 0.49013665447469923, 0.4482027346936985, 0.4019172087808247, 0.3495557094962521, 0.2878210301014979, 0.2085490270798369]]
            )),
        ((1, 3, 50), (
            [[1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.9720818148383507, 0.8131790705976006, 0.6815562761021817, 0.5174724283771737, 0.26652667927782564, 0.0, 0.0, 0.0, 0.0, 0.0], [0.6701644825368881, 0.6369289332054572, 0.6018608628699398, 0.5646189250767771, 0.5247404719050762, 0.4815709658559877, 0.434129735742411, 0.38082365965901116, 0.31872353546041926, 0.241128024826431]]
            )),
    ],
)

@pytest.mark.skip(reason="Fonctionne en local mais pas sur git. Différence au niveau des 2 (voir 3) dernières décimales.")
def test_chanson(args, expected):
    case = tias.Chanson_dry(h_0=args[0], x_0=args[1], f=args[2])
    case.compute_h(x, [0, 1, 5])
    assert case.h.tolist() == expected
    

# COUSSOT
@pytest.mark.parametrize(
    "args, expected",
    [
        ((1000, 500, 10), (
            [np.float64(-0.0), np.float64(0.01087624327121846), np.float64(0.04737700838741411), np.float64(0.11731752615106368), np.float64(0.23274299561171916), np.float64(0.4136679167205831), np.float64(0.6971539423485651), np.float64(1.1646862665375954), np.float64(2.064552691980992), np.float64(6.017841468046692)],
            [np.float64(0.0), np.float64(0.0101015289507715), np.float64(0.04078311103066006), np.float64(0.09324979268009957), np.float64(0.16979373056944314), np.float64(0.2743862465586561), np.float64(0.4140452915975218), np.float64(0.6025150691558743), np.float64(0.873963043733495), np.float64(1.4297862049506076)]
            )),
        ((1000, 100, 10), (
            [np.float64(-0.0), np.float64(0.002175248654243692), np.float64(0.009475401677482823), np.float64(0.023463505230212733), np.float64(0.04654859912234383), np.float64(0.08273358334411662), np.float64(0.13943078846971302), np.float64(0.23293725330751913), np.float64(0.41291053839619846), np.float64(1.2035682936093381)],
            [np.float64(0.0), np.float64(0.0020203057901543), np.float64(0.008156622206132011), np.float64(0.018649958536019914), np.float64(0.033958746113888626), np.float64(0.05487724931173123), np.float64(0.08280905831950436), np.float64(0.12050301383117486), np.float64(0.17479260874669897), np.float64(0.28595724099012154)]
            )),
        ((1000, 500, 0), (
            [np.float64(0.0), np.float64(0.053606772986177276), np.float64(0.2144270919447091), np.float64(0.48246095687559554), np.float64(0.8577083677788364), np.float64(1.3401693246544322), np.float64(1.9298438275023821), np.float64(2.626731876322687), np.float64(3.4308334711153456), np.float64(4.34214861188036)],
            [np.float64(0.0), np.float64(0.00030929728935062006), np.float64(0.0012487323210715671), np.float64(0.0028552022420585453), np.float64(0.0051988902739171314), np.float64(0.008401393760218997), np.float64(0.012677594350676962), np.float64(0.018448323871663053), np.float64(0.026759751096762655), np.float64(0.04377842202871259)]
            )),
    ],
)
@pytest.mark.xfail
def test_coussot(args, expected):
    case = tias.Coussot_shape(rho=args[0], tau=args[1], theta=args[2], H_size=10)
    case.compute_rheological_test_front_morpho()
    assert case.x == expected[0]
    case.compute_rheological_test_lateral_morpho()
    assert case.y == expected[1]
